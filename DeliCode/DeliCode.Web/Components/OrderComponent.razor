@inject ICartService CartService
@inject IOrderService OrderService
@inject NavigationManager NavManager

<div class="container">
    <div class="row">

            <ShowCart DeliveryMethod="@SelectedDeliverytype" Cart="@cart" OrderModel="@orderModel" />


        @if (!isValidPersonalDetails)
        {
            <div class="col-md-12 col-lg-7">
                <div class="card">
                    <div class="card-content">
                        <div class="card-body">
                            <div class="page-content page-container" id="page-content">

                                <EditForm Model="@orderModel" OnValidSubmit="@SavePersonalDetails">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Förnamn</label>
                                            <InputText class="form-control" id="firstname" @bind-Value="orderModel.FirstName" />
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Efternamn</label>
                                            <InputText class="form-control" id="lastname" @bind-Value="orderModel.LastName" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Epost</label>
                                            <InputText class="form-control" id="email" @bind-Value="orderModel.Email" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Adress</label>
                                            <InputText class="form-control" id="address" @bind-Value="orderModel.Address" />
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Postnummer</label>
                                            <InputText class="form-control" id="zipcode" @bind-Value="orderModel.ZipCode" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Stad</label>
                                            <InputText class="form-control" id="city" @bind-Value="orderModel.City" />
                                        </div>
                                        <div class="form-group col-md-6">
                                            <label>Land</label>
                                            <InputText class="form-control" id="country" @bind-Value="orderModel.Country" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Telefon</label>
                                            <InputText class="form-control" id="phone" @bind-Value="orderModel.Phone" />
                                        </div>
                                    </div>
                                    <div class="form-row">
                                        <div class="form-group col-md-6">
                                            <label>Extra information</label>
                                            <InputTextArea class="form-control" id="shippingnotes" @bind-Value="orderModel.ShippingNotes" />
                                        </div>
                                    </div>
                                    <button class="btn btn-primary" type="submit">Välj leveranssätt</button>
                                </EditForm>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            
                <ShowDeliveryOptions DeliveryOptions="@DeliveryOptions" OnClickCallback="SelectDelivery" OrderModel="@orderModel" />
        
        }
        @if (isValidPersonalDetails && isDeliverySelected)
        {

                <div class="card">
                    <div class="card-content">
                        <div class="card-body">
                            <div class="page-content page-container" id="page-content">

                                <button class="btn btn-primary" @onclick="@PlaceOrder">Beställ</button>

                            </div>
                        </div>
                    </div>
                </div>

        }
    </div>

</div>


@code {
    [Parameter]
    public string UserId { get; set; }

    private string messageText;

    private Order orderModel = new Order();
    private Cart cart = new Cart();
    private string userid;
    private bool isValidPersonalDetails = false;
    private bool isDeliverySelected = false;
    private KeyValuePair<string, decimal> SelectedDeliverytype;
    private Dictionary<string, decimal> DeliveryOptions = new Dictionary<string, decimal>();

    protected override async Task OnInitializedAsync()
    {
        cart = await CartService.GetCart();
        foreach (var item in cart.Items)
        {
            orderModel.OrderProducts.Add(new OrderProduct { Name = item.Product.Name, Price = item.Product.Price, ProductId = item.Product.Id, Quantity = item.Quantity });
        }
        DeliveryOptions.Add("Hemleverans", 299);
        DeliveryOptions.Add("Hämta i butik", 0);
        StateHasChanged();
    }

    private void SavePersonalDetails()
    {
        isValidPersonalDetails = true;
    }

    private void NavigateToProduct(Guid productid)
    {
        NavManager.NavigateTo("/product/Details?productId=" + productid.ToString(), true);
    }

    private void SelectDelivery(KeyValuePair<string, decimal> selectedDelivery)
    {
        orderModel.ShippingPrice = selectedDelivery.Value;
        SelectedDeliverytype = selectedDelivery;
        isDeliverySelected = true;
        StateHasChanged();
    }

    private async Task PlaceOrder()
    {
        @if (userid != null)
        {
            orderModel.UserId = userid;
        }
        try
        {
            var order = await OrderService.PlaceOrder(orderModel);
            NavManager.NavigateTo("/", true);
        }
        catch
        {
            isDeliverySelected = false;
            isValidPersonalDetails = false;
        }
    }
}
